SET(PLK_LIB_NAME "PlkQtApi")
PROJECT (${PLK_LIB_NAME} CXX) 

CMAKE_MINIMUM_REQUIRED (VERSION 2.8.11)

MESSAGE(STATUS "Configuring ${LIB_NAME}")

OPTION(OPLK_QT_API_LIB           "Compile openPOWERLINK QT library" ON)
IF (WIN32)
OPTION(OPLK_QT_API_WINDOWS_DLL   "Build openPOWERLINK Qt library as DLL" OFF)
ENDIF (WIN32)

IF(OPLK_QT_API_WINDOWS_DLL)
    SET(LIBRARY_TYPE SHARED)
ELSE()
    SET(LIBRARY_TYPE STATIC)
ENDIF()

FILE ( GLOB_RECURSE LIB_SOURCES "${DEMO_PLK_QT_LIB_SOURCE_DIR}/*.cpp" )
FILE ( GLOB_RECURSE LIB_HEADERS "${DEMO_PLK_QT_LIB_INCLUDE_DIR}/*.h" )

INCLUDE_DIRECTORIES(${DEMO_PLK_QT_LIB_INCLUDE_DIR})

find_package(Qt5Core REQUIRED)
get_target_property(QtCore_location Qt5::Core LOCATION)
#INCLUDE_DIRECTORIES(${QtCore_location})
message(STATUS "${QtCore_location}")

find_package(Qt5Xml REQUIRED)
get_target_property(QtXml_location Qt5::Xml LOCATION)
#INCLUDE_DIRECTORIES(${QtXml_location})
message(STATUS "${QtXml_location}")

ADD_DEFINITIONS (${QT_DEFINITIONS}
                -DCONFIG_MN
#                -DQT_XML_LIB
#                -DQT_CORE_LIB
                -DUNICODE
                -DPLKQTAPI_LIB)

# Find includes in corresponding build directories
SET(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
SET(CMAKE_AUTOMOC ON)


ADD_LIBRARY(${PLK_LIB_NAME} ${LIBRARY_TYPE} ${LIB_SOURCES} ${LIB_HEADERS})

IF(UNIX)
SET_TARGET_PROPERTIES(${PLK_LIB_NAME} PROPERTIES PREFIX "")
ENDIF()

TARGET_LINK_LIBRARIES(${PLK_LIB_NAME} optimized ${OPLKLIB} debug ${OPLKLIB_DEBUG})
TARGET_LINK_LIBRARIES(${PLK_LIB_NAME} Qt5::Core Qt5::Xml ${ADD_ADDITIONAL_DEPENDENCIES} ${PCAP_LIBRARIES})



SET_PROPERTY(TARGET ${PLK_LIB_NAME} PROPERTY DEBUG_POSTFIX "_d")

SET(OPLK_QT_API_DOC_DIR ${OPLK_ROOT_DIR}/doc/examples/demo_qt_advanced)
FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
CONFIGURE_FILE(${OPLK_QT_API_DOC_DIR}/doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
ADD_CUSTOM_TARGET(DOCUMENTATION ALL
${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
WORKING_DIRECTORY ${OPLK_QT_API_DOC_DIR}
COMMENT "Generating API documentation with Doxygen" VERBATIM
)
ENDIF(DOXYGEN_FOUND)

#INSTALL(
#TARGETS ${PLK_LIB_NAME} 
#CONFIGURATIONS  Debug
#DESTINATION ${PLK_QT_BINARY_DIR}/Debug
#)
#
#INSTALL(
#TARGETS ${PLK_LIB_NAME} 
#CONFIGURATIONS  Release
#DESTINATION ${PLK_QT_BINARY_DIR}/Release
#)

INSTALL(
TARGETS ${PLK_LIB_NAME} 
RUNTIME DESTINATION ${PLK_QT_BINARY_DIR}/
ARCHIVE DESTINATION ${PLK_QT_BINARY_DIR}/
)